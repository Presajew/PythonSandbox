""" 
Problem 12

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
1837119421
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

"""

import time
import math


def calculate() -> int:
    counter = 1
    triangle_number = 1
    while True:
        divisors_of_triangle_number = get_divisors(triangle_number)
        if len(divisors_of_triangle_number) > 500:
            break
        else:
            counter += 1
            triangle_number += counter
    return triangle_number


def get_divisors(val) -> list:
    output = []

    # should only need to traverse to sqrt(n)
    for index in range(1, int(math.sqrt(val)) + 1):
        if index in output:
            # if the value is already in list, skip
            continue
        if val % index == 0:
            output.append(int(index))

            # skip if value is the square root
            if val / index != index:
                output.append(int(val / index))

    return output


if __name__ == "__main__":
    start_time = time.time()
    print(f"The answer to Problem 12 is {calculate()}")
    end_time = time.time()
    print(f"This solution took {end_time - start_time} seconds to run")
